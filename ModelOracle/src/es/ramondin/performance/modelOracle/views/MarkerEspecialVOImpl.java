package es.ramondin.performance.modelOracle.views;

import es.ramondin.performance.modelOracle.views.common.MarkerEspecialVO;

import java.math.BigDecimal;

import java.util.ArrayList;

import oracle.jbo.ApplicationModule;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 19 08:36:09 CEST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MarkerEspecialVOImpl extends ViewObjectImpl implements MarkerEspecialVO {
    private String[] textoMarkersEsp;
    private Double[] valorMarkersEsp;
    private String[] colorMarkersEsp;
    
    /**
     * This is the default constructor (do not remove).
     */
    public MarkerEspecialVOImpl() {
        textoMarkersEsp = null;
        valorMarkersEsp = null;
        colorMarkersEsp = null;
    }
    
    public void cargaMarkersEsp(BigDecimal seccion, BigDecimal celula, Integer celulaAgrup, ArrayList celulasExcepcion, Integer anoRuptura, Integer anosHistorico, 
                              Integer hastaFecha, Boolean desgloseMensual, Boolean mismoPeriodo, Boolean romperPorTurno, String[] turnos) {
        String consultaSQL, queryOrig;
        
        textoMarkersEsp = null;
        valorMarkersEsp = null;
        colorMarkersEsp = null;
    
        RowSetIterator rsiMarkerEsp = this.getRowSetIterator();
    
        if (rsiMarkerEsp.getRowCount() != 0) {
            ArrayList<String> resAuxTexto = new ArrayList<String>();
            ArrayList<Double> resAuxValor = new ArrayList<Double>();
            ArrayList<String> resAuxColor = new ArrayList<String>();
            
            ApplicationModule am = this.getApplicationModule();
            MarkerEspecialQueryVOImpl meQueryImp = (MarkerEspecialQueryVOImpl)am.findViewObject("MarkerEspecialQuery");
            
            MarkerEspecialVORowImpl rowME = (MarkerEspecialVORowImpl)rsiMarkerEsp.first();
            while (rowME != null) {
                consultaSQL = rowME.getMmesConsultaSql();
                
                queryOrig = meQueryImp.getQuerySQL();
                meQueryImp.preparaQueryFinal(celulaAgrup, celulasExcepcion, consultaSQL);
                meQueryImp.executeWithParamsEdit(seccion, celula, anoRuptura, anosHistorico, hastaFecha, desgloseMensual, mismoPeriodo, romperPorTurno, turnos);
                
                resAuxTexto.add(meQueryImp.getTextoMarkerEsp());
                resAuxValor.add(meQueryImp.getValorMarkerEsp());
                resAuxColor.add(rowME.getMmesColor());
                
                meQueryImp.setQuerySQL(queryOrig);
                
                rowME = (MarkerEspecialVORowImpl)rsiMarkerEsp.next();
            }
            
            //Restablecemos el iterador
            rsiMarkerEsp.reset();
            
            int resSize = resAuxTexto.size();
            this.textoMarkersEsp = new String[resSize];
            this.valorMarkersEsp = new Double[resSize];
            this.colorMarkersEsp = new String[resSize];
            
            for (int i = 0; i < resSize; i++) {
                this.textoMarkersEsp[i] = resAuxTexto.get(i);
                this.valorMarkersEsp[i] = resAuxValor.get(i);
                this.colorMarkersEsp[i] = resAuxColor.get(i);
            }
        }
    }
    
    public String[] getColorMarkersEspIndependiente() {
        String res[] = null;
    
        RowSetIterator rsiMarkerEsp = this.getRowSetIterator();
    
        if (rsiMarkerEsp.getRowCount() != 0) {
            ArrayList<String> resAux = new ArrayList<String>();

            MarkerEspecialVORowImpl rowME = (MarkerEspecialVORowImpl)rsiMarkerEsp.first();
            while (rowME != null) {
                resAux.add(rowME.getMmesColor());
               
                rowME = (MarkerEspecialVORowImpl)rsiMarkerEsp.next();
            }
            
            //Restablecemos el iterador
            rsiMarkerEsp.reset();
            
            int resSize = resAux.size();
            res = new String[resSize];
            
            for (int i = 0; i < resSize; i++) {
                res[i] = resAux.get(i);
            }
        }
        
        return res;
    }

    public void setTextoMarkersEsp(String[] textoMarkers) {
        this.textoMarkersEsp = textoMarkers;
    }

    public String[] getTextoMarkersEsp() {
        return textoMarkersEsp;
    }

    public void setValorMarkersEsp(Double[] valorMarkers) {
        this.valorMarkersEsp = valorMarkers;
    }

    public Double[] getValorMarkersEsp() {
        return valorMarkersEsp;
    }
    
    public void setColorMarkersEsp(String[] colorMarkers) {
        this.colorMarkersEsp = colorMarkers;
    }

    public String[] getColorMarkersEsp() {
        return colorMarkersEsp;
    }
}
