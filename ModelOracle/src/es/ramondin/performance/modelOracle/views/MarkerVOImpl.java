package es.ramondin.performance.modelOracle.views;


import es.ramondin.performance.modelOracle.views.common.MarkerVO;

import java.util.ArrayList;

import oracle.jbo.ApplicationModule;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 24 15:52:14 CEST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MarkerVOImpl extends ViewObjectImpl implements MarkerVO {
    private String[] textoMarkers;
    private Double[] valorMarkers;
    private String[] colorMarkers;
    
    private static final String SEP_TEXTO = "[|]";
    public static final String TXT_COLOR_DEF = "COLOR_DEF_";
    public static final String TXT_TEXTO_DEF = "TEXTO_DEF_";
    
    /**
     * This is the default constructor (do not remove).
     */
    public MarkerVOImpl() {
        textoMarkers = null;
        valorMarkers = null;
        colorMarkers = null;
    }
    
    private void aplicarViewCriteria(Number idSeccion, Number idCelula, java.sql.Date desdeFecha, String tipoMarker) {
        if (desdeFecha == null)
            desdeFecha = new java.sql.Date(System.currentTimeMillis());
        
        ViewCriteria vc = this.getViewCriteria("MarkerVOCriteria");
        this.setMmarIdSeccionBV(idSeccion);
        this.setMmarIdCelulaBV(idCelula);
        this.setMmarDesdeFechaBV(new oracle.jbo.domain.Date(desdeFecha));
        this.setMmarTipoMarkerBV(tipoMarker);
        this.applyViewCriteria(vc);
        
        this.executeQuery();
    }
    
    public void cargaMarkers(Number idSeccion, Number idCelula, java.sql.Date desdeFecha, Number sentidoMejor) {
        String tipoMarker, textoMarker, textoAux[], colorMarker, colorAux[];
        Double valorNorma, sigma;
        int posAnadidas = 0;
        
        textoMarkers = null;
        valorMarkers = null;
        colorMarkers = null;
        
        ApplicationModule am = this.getApplicationModule();
        TipoMarkerVOImpl tipoMarkerImp = (TipoMarkerVOImpl)am.findViewObject("TipoMarker");
        
        RowSetIterator rsiTipoMarker = tipoMarkerImp.getRowSetIterator();
        
        if (rsiTipoMarker.getRowCount() != 0) {
            ArrayList<String> resAuxTexto = new ArrayList<String>();
            ArrayList<Double> resAuxValor = new ArrayList<Double>();
            ArrayList<String> resAuxColor = new ArrayList<String>();
            
            TipoMarkerVORowImpl rowTipoMarker = (TipoMarkerVORowImpl)rsiTipoMarker.first();
            while (rowTipoMarker != null) {
                tipoMarker = rowTipoMarker.getTmaTipoMarker();
                
                this.aplicarViewCriteria(idSeccion, idCelula, desdeFecha, tipoMarker);
                
                if (this.getRowCount() > 0) {
                    MarkerVORowImpl rowMarker = (MarkerVORowImpl)this.last();
                    
                    if (rowMarker != null) {
                        valorNorma = rowMarker.getMmarValorNorma() != null ? rowMarker.getMmarValorNorma().doubleValue() : null;
                        
                        if (rowMarker.getMmarSigma() != null) {
                            sigma = rowMarker.getMmarSigma().doubleValue();
                            
                            if (sentidoMejor == null || sentidoMejor.sign() >= 0) {
                                resAuxValor.add(valorNorma);
                                resAuxValor.add(valorNorma - 2.0*sigma);
                                resAuxValor.add(valorNorma + 2.0*sigma);
                            } else {
                                resAuxValor.add(valorNorma);
                                resAuxValor.add(valorNorma + 2.0*sigma);
                                resAuxValor.add(valorNorma - 2.0*sigma);
                            }
                        } else {
                            resAuxValor.add(valorNorma);
                        }

                        posAnadidas = resAuxValor.size() - resAuxTexto.size();

                        textoMarker = rowMarker.getMmarTexto();
                        textoAux = textoMarker != null ? textoMarker.split(SEP_TEXTO) : null;
                        
                        for (int i = 0; i < posAnadidas; i++) {
                            if (textoAux != null && i < textoAux.length)
                                resAuxTexto.add(textoAux[i]);
                            else
                                resAuxTexto.add(null);
                        }
                        
                        colorMarker = rowMarker.getMmarColor();
                        colorAux = colorMarker != null ? colorMarker.split(SEP_TEXTO) : null;
                        
                        for (int i = 0; i < posAnadidas; i++) {
                            if (colorAux != null && i < colorAux.length)
                                resAuxColor.add(colorAux[i]);
                            else
                                resAuxColor.add(null);
                        }
                    }
                }
                
                this.removeApplyViewCriteriaName("MarkerVOCriteria");
                
                rowTipoMarker = (TipoMarkerVORowImpl)rsiTipoMarker.next();
            }
            
            //Restablecemos el iterador
            rsiTipoMarker.reset();
            
            int resSize = resAuxTexto.size();
            this.textoMarkers = new String[resSize];
            this.valorMarkers = new Double[resSize];
            this.colorMarkers = new String[resSize];
            
            for (int i = 0; i < resSize; i++) {
                this.textoMarkers[i] = resAuxTexto.get(i);
                this.valorMarkers[i] = resAuxValor.get(i);
                this.colorMarkers[i] = resAuxColor.get(i);
            }
        }
    }
    
    /**
     * Returns the variable value for MmarDesdeFechaBV.
     * @return variable value for MmarDesdeFechaBV
     */
    public Date getMmarDesdeFechaBV() {
        return (Date)ensureVariableManager().getVariableValue("MmarDesdeFechaBV");
    }

    /**
     * Sets <code>value</code> for variable MmarDesdeFechaBV.
     * @param value value to bind as MmarDesdeFechaBV
     */
    public void setMmarDesdeFechaBV(Date value) {
        ensureVariableManager().setVariableValue("MmarDesdeFechaBV", value);
    }


    /**
     * Returns the variable value for MmarIdSeccionBV.
     * @return variable value for MmarIdSeccionBV
     */
    public Number getMmarIdSeccionBV() {
        return (Number)ensureVariableManager().getVariableValue("MmarIdSeccionBV");
    }

    /**
     * Sets <code>value</code> for variable MmarIdSeccionBV.
     * @param value value to bind as MmarIdSeccionBV
     */
    public void setMmarIdSeccionBV(Number value) {
        ensureVariableManager().setVariableValue("MmarIdSeccionBV", value);
    }

    /**
     * Returns the variable value for MmarIdCelulaBV.
     * @return variable value for MmarIdCelulaBV
     */
    public Number getMmarIdCelulaBV() {
        return (Number)ensureVariableManager().getVariableValue("MmarIdCelulaBV");
    }

    /**
     * Sets <code>value</code> for variable MmarIdCelulaBV.
     * @param value value to bind as MmarIdCelulaBV
     */
    public void setMmarIdCelulaBV(Number value) {
        ensureVariableManager().setVariableValue("MmarIdCelulaBV", value);
    }

    /**
     * Returns the variable value for MmarTipoMarkerBV.
     * @return variable value for MmarTipoMarkerBV
     */
    public String getMmarTipoMarkerBV() {
        return (String)ensureVariableManager().getVariableValue("MmarTipoMarkerBV");
    }

    /**
     * Sets <code>value</code> for variable MmarTipoMarkerBV.
     * @param value value to bind as MmarTipoMarkerBV
     */
    public void setMmarTipoMarkerBV(String value) {
        ensureVariableManager().setVariableValue("MmarTipoMarkerBV", value);
    }

    public void setTextoMarkers(String[] textoMarkers) {
        this.textoMarkers = textoMarkers;
    }

    public String[] getTextoMarkers() {
        return textoMarkers;
    }

    public void setValorMarkers(Double[] valorMarkers) {
        this.valorMarkers = valorMarkers;
    }

    public Double[] getValorMarkers() {
        return valorMarkers;
    }

    public void setColorMarkers(String[] colorMarkers) {
        this.colorMarkers = colorMarkers;
    }

    public String[] getColorMarkers() {
        return colorMarkers;
    }
}
